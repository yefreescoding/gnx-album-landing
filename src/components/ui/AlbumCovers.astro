---
interface Props {
  songId: number;
  title: string;
  artist: string;
}

const { songId, title, artist } = Astro.props;
---

<article class="covers" data-cover={songId}>
  <div class="card" aria-expanded="false">
    <div class="card-desc">
      <div class="img-section">
        <img src="cover.jpeg" alt="" />
      </div>
      <div class="card-header">
        <img src="vinyl.png" alt="" />
      </div>
      <button id="music-play" class="card_play">
        <svg
          class="play"
          width="22px"
          height="22px"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          color="currentColor"
          stroke-width="2"
        >
          <path
            d="M6.90588 4.53682C6.50592 4.2998 6 4.58808 6 5.05299V18.947C6 19.4119 6.50592 19.7002 6.90588 19.4632L18.629 12.5162C19.0211 12.2838 19.0211 11.7162 18.629 11.4838L6.90588 4.53682Z"
            fill="currentColor"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
        <svg 
          class="pause"
          width="22px" 
          height="22px" 
          viewBox="0 0 24 24" 
          fill="none" 
          xmlns="http://www.w3.org/2000/svg" 
          color="#000000" stroke-width="2">
          <path d="M6 18.4V5.6C6 5.26863 6.26863 5 6.6 5H9.4C9.73137 5 10 5.26863 10 5.6V18.4C10 18.7314 9.73137 19 9.4 19H6.6C6.26863 19 6 18.7314 6 18.4Z" fill="#000000" stroke="#000000" stroke-width="2"></path><path d="M14 18.4V5.6C14 5.26863 14.2686 5 14.6 5H17.4C17.7314 5 18 5.26863 18 5.6V18.4C18 18.7314 17.7314 19 17.4 19H14.6C14.2686 19 14 18.7314 14 18.4Z" fill="#000000" stroke="#000000" stroke-width="2"></path>
        </svg>
      </button>
    </div>
  </div>
  <div class="card-title">{title}</div>
  <p class="card-subtitle">{artist}</p>
</article>

<style>
  .card {
    --primary-clr: #1c204b;
    --dot-clr: #bbc0ff;
    --_size: 300px;

    width: var(--_size);
    height: var(--_size);
    border-radius: 3px;
    margin-bottom: 2rem;
  }

  .card {
    cursor: pointer;
    position: relative;
    overflow: hidden;
    display: grid;

    transition: transform 300ms;

    & img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }

  .card_play {
    --_size: 52px;
    --_clr-bgk: hsla(0, 0%, 99%, 0.4);
    --_blur-int: 4px;

    position: absolute;
    inset: 0;
    display: none;
    margin: auto;
    place-items: center;
    padding: 0.5rem;
    border-radius: 100vw;
    background-color: var(--_clr-bgk);
    color: hsl(0, 0%, 100%);
    backdrop-filter: blur(var(--_blur-int));
    width: var(--_size);
    height: var(--_size);

    & .pause {
      display: none;
    }
  }

  .img-section {
    position: absolute;
    inset: 0;
    z-index: 90;

    transition: 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .card:hover {
    .img-section {
      transform: translateX(-25%);
    }

    .card_play {
      display: grid;
      z-index: 90;
    }
  }

  .card[aria-expanded="true"] {
    transform: scale(1.1);

    .img-section {
      transform: translateX(-100%);
    }

    .card_play {
      display: grid;

      & .pause {
        display: block;
      }
      & .play {
        display: none;
      }
    }

    .card-header { 
       animation-play-state: running;
    }
  }

  .card-desc {
    position: relative;
    display: grid;
    gap: 10px;
  }

  .card-header {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;

    animation-name: rotate;
    animation-duration: 5s;
    animation-iteration-count: infinite;
    animation-play-state: paused;
    animation-timing-function: linear;
  }

  .card-title {
    font-size: 1.2em;
    font-weight: 500;
    text-align: center;
  }

  .card-subtitle {
    text-align: center;
    font-size: 0.9em;
    font-weight: 500;
  }

  @keyframes rotate {
    0% {
      transform: rotate(0);
    }

    100% {
      transform: rotate(360deg);
    }
  }
</style>
